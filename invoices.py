from fhir.resources.invoice import Invoice
from fhir.resources.chargeitem import ChargeItem
from fhir.resources.annotation import Annotation
from fhir.resources.coding import Coding
from fhir.resources.identifier import Identifier
from fhir.resources.meta import Meta
from fhir.resources.reference import Reference
from fhir.resources.codeableconcept import CodeableConcept
from fhir.resources.bundle import Bundle, BundleEntry
from fhir.resources.monetarycomponent import MonetaryComponent
from fhir.resources.money import Money
from patients import pick_patient
from organizations import pick_organization
from uuid import uuid4
from datetime import date, timedelta
import random
from decimal import Decimal
from typing import List, Mapping
from pydantic import BaseModel
import json


class GOÄZifferSatz(BaseModel):
    satz: str
    faktor: Decimal
    betrag: Decimal


class GOÄZiffer(BaseModel):
    ziffer: str
    titel: str
    abschnitt: str
    punktzahl: Decimal
    sätze: List[GOÄZifferSatz]
    ausschlussziffern: list


class GOÄUnterabschnitt(BaseModel):
    titel: str
    ziffern: List[str]
    

class GOÄAbschnitt(BaseModel):
    abschnitt: str
    titel: str
    unterabschnitte: List[GOÄUnterabschnitt]


goä_abschnitte: Mapping[str, GOÄAbschnitt] = dict()
for line in open("goä-abschnitte.ndjson", "rt").readlines():
    abschnitt = GOÄAbschnitt(**json.loads(line))
    goä_abschnitte[abschnitt.abschnitt] = abschnitt

goä_ziffern: Mapping[str, GOÄZiffer] = dict()
for line in open("goä.ndjson", "rt").readlines():
    ziffer = GOÄZiffer(**json.loads(line))
    goä_ziffern[ziffer.ziffer] = ziffer
    

def generate_random_invoice() -> Bundle:
    bundle = Bundle.construct()
    bundle.type = "collection"

    invoice = Invoice.construct()
    invoice.status = random.choice(["draft", "issued", "balanced", "cancelled", "entered-in-error"])
    # set resource id
    invoice.id = str(uuid4())
    # set random date
    days = random.randint(0, 365)
    invoice.date = date.today() - timedelta(days=days)
    # set metadata
    invoice.meta = Meta.construct()
    invoice.meta.profile = [
        "https://gematik.de/fhir/ergpkv/StructureDefinition/ergpkv-rechnung"
    ]
    # add invoice to bundle
    bundle.entry = [BundleEntry(resource=invoice)]
    # set type
    invoice.type = CodeableConcept()
    invoice.type.coding = [Coding.construct()]
    invoice.type.coding[0].system = "https://gematik.de/fhir/ergpkv/CodeSystem/ergpkv-rechnung-type-cs"
    invoice.type.coding[0].code = "erechnung"    
    # set identifier
    invoice.identifier = [Identifier.construct()]
    invoice.identifier[0].type = CodeableConcept()
    invoice.identifier[0].type.coding = [Coding.construct()]
    invoice.identifier[0].type.coding[0].system = "http://fhir.de/CodeSystem/identifier-type-de-basis"
    invoice.identifier[0].type.coding[0].code = "invoice"
    invoice.identifier[0].system = "http://irgendein-leistungserbinger.de/fhir/sid/rechnungen"
    invoice.identifier[0].value = (
        f"{invoice.date}/{random.randint(1000, 9999)}"
    )
    # set recipient
    patient = pick_patient()
    invoice.recipient = Reference()
    invoice.recipient.identifier = Identifier.construct()
    invoice.recipient.identifier = patient.identifier[0]
    invoice.recipient.reference = f"Patient/{patient.id}"
    invoice.recipient.display = patient.name[0].text
    # set issuer
    org_bundle = pick_organization()
    org = find_in_bundle(org_bundle, "Organization").resource
    bundle.entry.append(BundleEntry(resource=org))
    org_location = find_in_bundle(org_bundle, "Location").resource
    bundle.entry.append(BundleEntry(resource=org_location))
    invoice.issuer = Reference()
    invoice.issuer.identifier = Identifier.construct()
    invoice.issuer.identifier = org.identifier[0]
    invoice.issuer.reference = f"Organization/{org.identifier[0].value}"
    invoice.issuer.display = org.name
    # set subject
    invoice.subject = Reference()
    invoice.subject.identifier = Identifier.construct()
    invoice.subject.identifier = patient.identifier[0]
    invoice.subject.reference = f"Patient/{patient.id}"
    invoice.subject.display = patient.name[0].text
    # add note
    invoice.note = [Annotation.construct()]
    invoice.note[0].text = "Random invoice generated by Syndata"

    _fill_invoice(invoice, bundle)

    return bundle


def _fill_invoice(invoice: Invoice, bundle: Bundle):
    charge_items: List[ChargeItem] = list()

    z = goä_ziffern[random.choice(["1", "3", "5"])]
    charge_items.append(_charge_item(invoice, z))

    z = random.choice(list(filter(lambda z: z.abschnitt == 'analog', goä_ziffern.values())))
    charge_items.append(_charge_item(invoice, z))

    zs = random.sample(list(goä_ziffern.values()), random.randint(1, 3))
    for z in zs:
        charge_items.append(_charge_item(invoice, z))

    invoice.lineItem = list()
    total = Decimal(0)
    for charge_item in charge_items:
        bundle.entry.append(BundleEntry(resource=charge_item))
        total += charge_item.totalPriceComponent.amount.value
        invoice.lineItem.append(Reference(reference=f"ChargeItem/{charge_item.id}"))

    tax = round(total * Decimal(0.19), 2)

    invoice.totalPriceComponent = [MonetaryComponent.construct()]
    invoice.totalPriceComponent[0].type = "tax"
    invoice.totalPriceComponent[0].factor = 0.19
    invoice.totalPriceComponent[0].amount = Money.construct()
    invoice.totalPriceComponent[0].amount.currency = "EUR"
    invoice.totalPriceComponent[0].amount.value = tax

    invoice.totalNet = Money(value=total, currency="EUR")
    invoice.totalGross = Money(value=total + tax, currency="EUR")


def _charge_item(invoice: Invoice, ziffer: GOÄZiffer):
    charge_item = ChargeItem.construct()
    charge_item.status = "billable"
    charge_item.id = str(uuid4())
    charge_item.subject = invoice.subject
    charge_item.meta = Meta.construct()
    charge_item.meta.profile = [
        "https://gematik.de/fhir/ergpkv/StructureDefinition/ergpkv-rechnungsposition"
    ]
    charge_item.code = CodeableConcept.construct()
    charge_item.code.coding = [Coding.construct()]
    charge_item.code.coding[0].system = "http://fhir.de/CodeSystem/bäk/goä"
    charge_item.code.coding[0].code = ziffer.ziffer
    charge_item.code.text = (ziffer.titel[:120] + '..') if len(ziffer.titel) > 120 else ziffer.titel
    #charge_item.code.text = ziffer.titel
    
    charge_item.totalPriceComponent = MonetaryComponent.construct()
    charge_item.totalPriceComponent.type = "base"
    charge_item.totalPriceComponent.amount = Money.construct()
    charge_item.totalPriceComponent.amount.currency = "EUR"
    charge_item.totalPriceComponent.amount.value = ziffer.sätze[0].betrag
    return charge_item


def find_in_bundle(bundle: Bundle, resource_type: str) -> BundleEntry:
    return next(filter(lambda e: e.resource.resource_type == resource_type, bundle.entry))